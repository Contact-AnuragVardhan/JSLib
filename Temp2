 "use strict"; 
function NSTableRowMover(setting) 
{
	this.util = new NSUtil();
	
	this.__id = null;
	this.__setting = setting;
	this.__config = null;
	
	this.__currentRow = null;
	this.__rowMouseOffset = null;
	this.__lastYPos = 0;
	
	this.__divMovable = null;
	
	this.__documentMouseMoveRef = null;
	this.__documentMouseUpRef = null;
	
	this.__initialize();
}

NSTableRowMover.prototype.remove = function() 
{ 
	if(this.__documentMouseMoveRef)
	{
		this.util.removeEvent(document,"mousemove",this.__documentMouseMoveRef);
		this.__documentMouseMoveRef = null;
	}
	if(!this.__documentMouseUpRef)
	{
		this.util.removeEvent(document,"mouseup",this.__documentMouseUpRef);
		this.__documentMouseUpRef = null;
	}
};

NSTableRowMover.prototype.__initialize = function()
{
	if(this.__setting)
	{
		this.__config = {
				table: this.__setting["table"] || null,
				isSameTableMove: (this.util.isUndefined(this.__setting["isSameTableMove"]) || this.__setting["isSameTableMove"] === null) ? true : Boolean.parse(this.__setting["isSameTableMove"]),
				dropEndHandler: (this.__setting["dropEndHandler"] ? this.util.getFunction(this.__setting["dropEndHandler"]) : null)
		};
		if(this.__config.table)
		{
			if(!this.__documentMouseMoveRef)
			{
				this.__documentMouseMoveRef = this.__documentMouseMoveHandler.bind(this);
				this.util.addEvent(document,"mousemove",this.__documentMouseMoveRef);
			}
			if(!this.__documentMouseUpRef)
			{
				this.__documentMouseUpRef = this.__documentMouseUpHandler.bind(this);
				this.util.addEvent(document,"mouseup",this.__documentMouseUpRef);
			}
			var rows = this.__config.table.tBodies[0].rows;
	        for (var count = 0; count < rows.length; count++) 
	        {
	        	var row = rows[count];
	        	var dragAllowed = true;
	    		if(row.getAttribute("nsDragAllowed"))
	    		{
	    			dragAllowed = Boolean.parse(row.getAttribute("nsDragAllowed"));
	    		}
				if (dragAllowed) 
				{ 
					this.__makeRowDraggable(row);
				}
	        }
		}
	}
};

NSTableRowMover.prototype.__rowMouseDownHandler= function(event)
{
	event = this.util.getEvent(event);
    var target = this.util.getTarget(event);
    target = this.util.findParent(target,"TR");
    this.__currentRow = target;
    this.__rowMouseOffset = this.util.getMouseOffset(event,target);
	if(!this.__config.isSameTableMove && this.__currentRow)
	{
		this.__divMovable = this.util.createDiv(this.__getID() + "clonedRow", "nsDraggableCloneRow");
		var table = document.createElement("table");
		var body = document.createElement("tbody");
		var row = this.__currentRow.cloneNode(true);
		body.appendChild(row);
		table.appendChild(body);
		this.__divMovable.appendChild(table);
		document.body.appendChild(this.__divMovable);
		this.__setDivMovablePosition(event);
	}
	return false;
};

NSTableRowMover.prototype.__documentMouseMoveHandler = function(event)
{
    if(this.__config.isSameTableMove) 
    {
    	if(this.__currentRow)
    	{
    		event = this.util.getEvent(event);
    		var mousePosition = this.util.getEventPosition(event);
    		var yPos = mousePosition.top - this.__rowMouseOffset.y;
            if(yPos != this.__lastYPos) 
            {
                var movingDown = yPos > this.__lastYPos;
                this.__lastYPos = yPos;
                this.__currentRow.style.backgroundColor = "#eee";
                //moving all other rows up effect
                var currentRow = this.__findDroppableRow(this.__config.table,yPos);
                if (currentRow) 
                {
                    if (movingDown && this.__currentRow != currentRow) 
                    {
                    	this.__currentRow.parentNode.insertBefore(this.__currentRow,currentRow.nextSibling);
                    } 
                    else if (!movingDown && this.__currentRow != currentRow) 
                    {
                    	this.__currentRow.parentNode.insertBefore(this.__currentRow,currentRow);
                    }
                }
            }
    	}
    	return false;
    }
    else if(this.__divMovable)
    {
    	this.__setDivMovablePosition(event);
    	return false;
    }
};

NSTableRowMover.prototype.__documentMouseUpHandler = function(event)
{
    if(this.__currentRow) 
    {
    	var droppedRow = this.__currentRow;
    	if(this.__config.isSameTableMove)
    	{
            droppedRow.style.backgroundColor = "transparent";
            if(this.__config.dropEndHandler)
            {
            	this.__config.dropEndHandler(this.__currentRow);
            }
    	}
    	else if(this.__divMovable)
        {
    		event = this.util.getEvent(event);
    		var mousePosition = this.util.getEventPosition(event);
    		this.__divMovable.style.display = "none";
    		var target = document.elementFromPoint(mousePosition.left,mousePosition.top);
    		//for Opera
    		if (target.nodeType === 3) 
    		{ 
    			target = target.parentNode;
    		}
    		var targetTable = this.util.findChild(target,"TABLE");
    		if(!targetTable)
    		{
    			targetTable = this.util.findParent(target,"TABLE");
    		}
    		var targetRow = this.__findDroppableRow(targetTable,mousePosition.top);
    		this.__divMovable.parentNode.removeChild(this.__divMovable);
    		this.__divMovable = null;
    		if(this.__config.dropEndHandler)
            {
            	this.__config.dropEndHandler(this.__currentRow,targetTable,targetRow);
            }
    	}
        this.__currentRow = null;
    }
};

NSTableRowMover.prototype.__makeRowDraggable = function(row) 
{
    if(row)
    {
    	this.util.addStyleClass(row,"nsDraggableRow");
    	this.util.addEvent(row,"mousedown",this.__rowMouseDownHandler.bind(this));
    }
};

NSTableRowMover.prototype.__findDroppableRow = function(table,yPos) 
{
	if(table && table.tBodies && table.tBodies.length > 0)
	{
		var rows = this.__config.table.tBodies[0].rows;
		for (var count = 0; count < rows.length; count++) 
		{
			var row = rows[count];
			var dropAllowed = true;
			if(row.getAttribute("nsDropAllowed"))
			{
				dropAllowed = Boolean.parse(row.getAttribute("nsDropAllowed"));
			}
			if(dropAllowed) 
			{
				var offset = this.util.getCumulativeOffset(row);
				var rowHeight = parseInt(row.offsetHeight)/2;
				if (row.offsetHeight === 0) 
				{
					offset = this.util.getCumulativeOffset(row.firstChild);
					rowHeight = parseInt(row.firstChild.offsetHeight)/2;
				}
				//console.log("yPos::" + yPos + ",offset.y::" + offset.y + ",rowHeight::" + rowHeight);
				// Because we always have to insert before, we need to offset the height a bit
				if ((yPos > offset.y - rowHeight) && (yPos < (offset.y + rowHeight))) 
				{
					return row;
				}
			}
		}
	}
	return null;
};

NSTableRowMover.prototype.__setDivMovablePosition = function(event)
{
	if(this.__divMovable)
    {
    	event = this.util.getEvent(event);
    	var posEvent = this.util.getEventPosition(event);
    	this.__divMovable.style.left = posEvent.left + "px";
    	this.__divMovable.style.top = posEvent.top + "px";
    }
};

NSTableRowMover.prototype.__getID = function()
{
	if(!this.__id)
	{
		if(this.__config.table.hasAttribute("id"))
		{
			this.__id = this.__config.table.getAttribute("id");
		}
		else if(this.__config.table.hasAttribute("name"))
		{
			this.__id = this.__config.table.getAttribute("name");
		}
		else
		{
			this.__id = "comp" + this.util.getUniqueId();
		}
	}
	return this.__id;
};
